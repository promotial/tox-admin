define(function(l){var e=l("kendo"),a=l("modules/core/base-classes"),b=l("modules/core/base-commands"),d=l("modules/core/core-module"),h=l("modules/notifications/notifications-service"),i=l("text!./notifications-template.html"),g=l("dom!notificationsContainer");var c=window;var j=a.ViewModelBase.extend({_showNotifications:false,showCurrentNotification:false,currentNotification:{message:"",title:"",type:"",read:false},unreadNotificationsCount:0,init:function(n){var o=this;a.ViewModelBase.fn.init.apply(o,[o]);o.set("notificationsDS",n);if(n.data().length!==0){o.set("currentNotification",n.data()[0])}o.notificationsDS.bind("change",$.proxy(o.onDsChange,o))},removeNotification:function(n){var o=this;o.notificationsDS.remove(n);if(o.notificationsCount()===0){o.hide()}},displayCurrentNotification:function(){var n=this;if(!n._showNotifications){n.set("showCurrentNotification",true);if(n.timeoutID){window.clearTimeout(n.timeoutID)}n.timeoutID=window.setTimeout(function(){n.set("showCurrentNotification",false)},2000)}},toggleNotifications:function(){var n=this;if(n._showNotifications){n.hide()}else{n.set("showCurrentNotification",false);n.set("_showNotifications",true)}},hide:function(){var n=this;n.set("_showNotifications",false)},hideCurrentNotification:function(){var n=this;n.set("showCurrentNotification",false)},deleteAllNotifications:function(){var q=this,p;for(var n=0,o=q.notificationsCount();n<o;n++){p=q.notificationsDS.data()[n];if(p.deleteCallback){p.deleteCallback.apply(p,[])}}q.notificationsDS.data([]);q.set("_showNotifications",false);q.set("unreadNotificationsCount",0)},notificationsCount:function(){var n=this;return n.get("notificationsDS").data().length},showNotifications:function(){return this.get("notificationsDS").data().length!==0&&this.get("_showNotifications")},executeClickCallback:function(n){var p=this,q=this.get("unreadNotificationsCount"),o=n.data;if(!o.read){p.set("unreadNotificationsCount",q-1);n.data.set("read",true)}n.data.clickCallback.apply(n,[n.data])},onDsChange:function(n){var p=this,o=p.get("notificationsDS").data();if(n.action==="add"&&o.length!==0){p.set("currentNotification",[o[0]]);p.displayCurrentNotification()}p.countUreadNotifications()},countUreadNotifications:function(){var q=this,n=0,o=q.get("notificationsDS").data();for(var p=0;p<o.length;p++){if(o[p].read===false){n++}}q.set("unreadNotificationsCount",n)}});var m=b.CommandBase.extend({events:{TOGGLE_NOTIFICATIONS:"toggleNotifications"},init:function(){var n=this;b.CommandBase.fn.init.apply(n,arguments)},execute:function(){var n=this;n.trigger(n.events.TOGGLE_NOTIFICATIONS)}});var k=d.ViewRendererBase.extend({bind:function(n){var o=this;o.viewModel=n.viewModel;if(o.viewModel.notificationsCount()!==0){o.viewModel.displayCurrentNotification()}}});var f=e.Observable.extend({init:function(){var o=this,p,n=h.getNotificationsDataSource(),q=new k();e.Observable.fn.init.apply(o,arguments);o.notificationsViewModel=new j(n);q.renderInside(i,o.notificationsViewModel,g);p=o.registerToggleNotificationsCommand();n.bind("change",$.proxy(p.raiseCanExecuteChanged,p));p.canExecute=function(){return h.notificationsCount()!==0};p.bind(p.events.TOGGLE_NOTIFICATIONS,$.proxy(o.onToggle,o))},registerToggleNotificationsCommand:function(){var n=this,o;d.frameService.initializeMenu(c.NOTIFICATIONS_MENU_REGION,c.TOP_BAR_COMMANDS,{shouldAddMenuClass:true});o=new m(c.COMMAND_TOGGLE_NOTIFICATIONS,"Notifications",[c.TOP_BAR_COMMANDS],[{region:c.NOTIFICATIONS_MENU_REGION}]);d.commandService.registerCommand(o);return o},onToggle:function(){var n=this;n.notificationsViewModel.toggleNotifications()}});return{NotificationsController:new f()}});