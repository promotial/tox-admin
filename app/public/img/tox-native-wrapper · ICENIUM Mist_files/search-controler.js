define(function(c){var b=c("kendo");var a=window;var d=b.Observable.extend({init:function(){b.Observable.fn.init.apply(this,arguments)},initFindInDocument:function(e){this.trigger(a.OPEN_FIND_DIALOG,e)},initReplaceInDocument:function(e){this.trigger(a.OPEN_FIND_DIALOG_FOR_REPLACE,e)},closeFindDialog:function(){this.trigger(a.CLOSE_FIND_DIALOG)},clearFindInDocument:function(e){this.trigger(a.CLEAR_FIND_IN_DOCUMENT,e)},changeSearchState:function(e){this.trigger(a.FIND_IN_DOCUMENT_STATE_CHANGED,{editor:e.editor,state:e.state})},findInDocument:function(e){var j=this;var f=e.editor;var i=e.text;var h=e.replaceText;var g={text:i,replaceText:h,editor:f,isCaseSense:e.isCaseSense,isRegex:e.isRegex,callback:function(k){j.changeSearchState({editor:f,state:k})}};j.clearFindInDocument(g);j.trigger(a.FIND_IN_DOCUMENT,g)},findNextInDocument:function(e){var h=this;var f=e.editor;var g=e.editor.searchState;if(g){h.trigger(a.FIND_NEXT_IN_DOCUMENT,{editor:f,callback:function(i){h.changeSearchState({editor:f,state:i})}})}},findPreviousInDocument:function(e){var g=this,f=e.editor.searchState;if(f){g.trigger(a.FIND_PREVIOUS_IN_DOCUMENT,{editor:e.editor,callback:function(h){g.changeSearchState({editor:e.editor,state:h})}})}},replaceCurrentInDocument:function(e){var f=this;f.trigger(a.REPLACE_CURRENT_SELECTION,{editor:e.editor})},replaceAllInDocument:function(e){var g=this;var f=e.editor;g.trigger(a.REPLACE_ALL_MATCHS,{editor:f,callback:function(h){g.changeSearchState({editor:f,state:h})}})}});return new d()});